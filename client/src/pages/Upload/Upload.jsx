import React, { useState } from 'react';
import api from '../../service/api'; 
import { useAuth } from '../../context/AuthContext'; 
import { useNavigate } from 'react-router-dom'; 
import './Upload.css';

const Upload = () => {
  // State to handle the video metadata and upload status
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [file, setFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);

  const { user } = useAuth(); // Get the authenticated user details
  const navigate = useNavigate(); // Hook for navigation

  // Handle file input change
  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  // Handle the upload process
  const handleUpload = async (event) => {
    event.preventDefault(); // Prevent form submission

    // Ensure all required fields are filled
    if (!file || !title) {
      alert('Veuillez remplir tous les champs.');
      return;
    }

    setIsUploading(true); // Indicate the upload is in progress

    try {
      // 1️⃣ Request a signed URL from the backend
      const signResponse = await api.post(
        '/videos/upload-url',
        {
          fileName: file.name,
          fileType: file.type,
          fileSize: file.size,
        },
        {
          headers: { Authorization: `Bearer ${user?.token}` }, // Pass the token for authentication
        }
      );

      const { uploadUrl, key } = signResponse.data; // Extract the signed URL and key

      // 2️⃣ Upload the video directly to S3 using the signed URL
      const s3Response = await fetch(uploadUrl, {
        method: 'PUT',
        headers: { 'Content-Type': file.type },
        body: file, // The video file
      });

      if (!s3Response.ok) throw new Error('Échec de l\'upload vers S3');

      // 3️⃣ Save video metadata in the database
      await api.post(
        '/videos/save-metadata',
        {
          title,
          description,
          key, // Use the key generated by the backend
        },
        {
          headers: { Authorization: `Bearer ${user?.token}` },
        }
      );

      alert('Vidéo uploadée avec succès !');
      navigate('/'); // Redirect to the home page

      // Reset the form
      setTitle('');
      setDescription('');
      setFile(null);
    } catch (error) {
      console.error('Upload error:', error);
      alert('Erreur lors de l\'upload : ' + error.message);
    } finally {
      setIsUploading(false); // Reset the upload state
    }
  };

  return (
    <div className="upload-container">
      <h2>Uploader une Vidéo</h2>
      <form className="upload-form" onSubmit={handleUpload}>
        {/* Input for video title */}
        <div className="form-group">
          <label htmlFor="title">Titre</label>
          <input
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Titre de la vidéo"
            required
          />
        </div>
        
        {/* Input for video description */}
        <div className="form-group">
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Décris ta vidéo..."
          />
        </div>
        
        {/* Input for video file */}
        <div className="form-group">
          <label htmlFor="video">Sélectionner une Vidéo</label>
          <input
            type="file"
            id="video"
            accept="video/*"
            onChange={handleFileChange}
            required
          />
        </div>

        {/* Upload button */}
        <button type="submit" disabled={isUploading} className="upload-button">
          {isUploading ? 'Uploading...' : 'Uploader la Vidéo'}
        </button>
      </form>
    </div>
  );
};

export default Upload;
