version: '3.8'

services:
  api-gateway:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/api-gateway
    depends_on:
      - user-service
      - video-service
      - recommender-service
    environment:
      API_GATEWAY_PORT: ${API_GATEWAY_PORT}
      JWT_SECRET: ${JWT_SECRET}
      MONGODB_URI: ${MONGODB_URI}
      RABBITMQ_URI: ${RABBITMQ_URI}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      VIDEO_SERVICE_PORT: ${VIDEO_SERVICE_PORT}
      RECOMMENDER_SERVICE_URL: ${RECOMMENDER_SERVICE_URL}
    ports:
      - "3009:${API_GATEWAY_PORT}"
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads

  mongo:
    container_name: docker_mongo_1
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - published: ${MONGODB_PORT}
        target: ${MONGODB_PORT}
    volumes:
      - /home/ing/Bureau/TikTok_Clone/server/docker/services/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - mongodb_data:/data/db:rw

  postgres:
    container_name: docker_postgres_1
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - published: ${POSTGRES_PORT}
        target: ${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw

  rabbitmq:
    container_name: docker_rabbitmq_1
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - published: ${RABBITMQ_PORT}
        target: ${RABBITMQ_PORT}
      - published: ${RABBITMQ_MANAGEMENT_PORT}
        target: ${RABBITMQ_MANAGEMENT_PORT}
    volumes:
      - /home/ing/Bureau/TikTok_Clone/server/docker/services/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro

  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - published: ${REDIS_PORT}
        target: ${REDIS_PORT}
    volumes:
      - /home/ing/Bureau/TikTok_Clone/server/docker/services/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data:rw

  user-service:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/services/user-service
    depends_on:
      - mongo
      - rabbitmq
    environment:
      JWT_SECRET: ${JWT_SECRET}
      MONGODB_URI: ${MONGODB_URI}
      RABBITMQ_URI: ${RABBITMQ_URI}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    ports:
      - published: ${USER_SERVICE_PORT}
        target: ${USER_SERVICE_PORT}
    env_file:
      - .env

  video-service:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/services/video-service
    depends_on:
      - postgres
      - rabbitmq
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBITMQ_URI: ${RABBITMQ_URI}
      VIDEO_SERVICE_PORT: ${VIDEO_SERVICE_PORT}
    ports:
      - published: ${VIDEO_SERVICE_PORT}
        target: ${VIDEO_SERVICE_PORT}
    env_file:
      - .env
    volumes:
      - ../services/video-service/uploads:/app/uploads
  
  recommender-service:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/services/recommender-service
    depends_on:
      - rabbitmq
      - redis
    environment:
      RECOMMENDATION_SERVICE_PORT: ${RECOMMENDATION_SERVICE_PORT}
      RABBITMQ_URI: ${RABBITMQ_URI}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - published: ${RECOMMENDATION_SERVICE_PORT}
        target: ${RECOMMENDATION_SERVICE_PORT}
    env_file:
      - .env


volumes:
  mongodb_data: {}
  postgres_data: {}
  redis_data: {}
