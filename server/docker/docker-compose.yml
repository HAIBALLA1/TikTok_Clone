version: '3.8'

services:
  api-gateway:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/api-gateway
    depends_on:
      - user-service
      - video-service
      - recommender-service
    environment:
      API_GATEWAY_PORT: ${API_GATEWAY_PORT}
      JWT_SECRET: ${JWT_SECRET}
      MONGODB_URI: ${MONGODB_URI}
      RABBITMQ_URI: ${RABBITMQ_URI}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      VIDEO_SERVICE_PORT: ${VIDEO_SERVICE_PORT}
      RECOMMENDER_SERVICE_URL: ${RECOMMENDER_SERVICE_URL}
    ports:
      - "3009:${API_GATEWAY_PORT}"
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
    networks:
      - tiktok_network

  mongo:
    container_name: docker_mongo_1
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    volumes:
      - /home/ing/Bureau/TikTok_Clone/server/docker/services/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - mongodb_data:/data/db:rw
    networks:
      - tiktok_network

  postgres:
    container_name: docker_postgres_1
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    networks:
      - tiktok_network

  rabbitmq:
    container_name: docker_rabbitmq_1
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - /home/ing/Bureau/TikTok_Clone/server/docker/services/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - tiktok_network

  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - /home/ing/Bureau/TikTok_Clone/server/docker/services/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data:rw
    networks:
      - tiktok_network

  user-service:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/services/user-service
    depends_on:
      - mongo
      - rabbitmq
    environment:
      JWT_SECRET: ${JWT_SECRET}
      MONGODB_URI: ${MONGODB_URI}
      RABBITMQ_URI: ${RABBITMQ_URI}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    env_file:
      - .env
    networks:
      - tiktok_network

  video-service:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/services/video-service
    depends_on:
      - postgres
      - rabbitmq
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBITMQ_URI: ${RABBITMQ_URI}
      VIDEO_SERVICE_PORT: ${VIDEO_SERVICE_PORT}
    ports:
      - "${VIDEO_SERVICE_PORT}:${VIDEO_SERVICE_PORT}"
    env_file:
      - .env
    volumes:
      - ../services/amqplib.service.mjs:/usr/src/app/amqplib.service.mjs

      - ../services/video-service/uploads:/app/uploads
    networks:
      - tiktok_network

  recommender-service:
    build:
      context: /home/ing/Bureau/TikTok_Clone/server/services/recommender-service
    depends_on:
      - rabbitmq
      - redis
    environment:
      RECOMMENDATION_SERVICE_PORT: ${RECOMMENDATION_SERVICE_PORT}
      RABBITMQ_URI: ${RABBITMQ_URI}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${RECOMMENDATION_SERVICE_PORT}:${RECOMMENDATION_SERVICE_PORT}"
    env_file:
      - .env
    volumes:
      - ../services/amqplib.service.mjs:/app/src/amqplib.service.mjs


    networks:
      - tiktok_network

volumes:
  mongodb_data: {}
  postgres_data: {}
  redis_data: {}

networks:
  tiktok_network:
    driver: bridge
